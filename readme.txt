# 使い方
注: markdown調で書いているのでこちら(https://github.com/okwrtdsh/statistics)から見ることをお勧めいたします。

## 演習課題2
### オプションについて
```shell
$ python main.py --help
```

```shell
Usage: main.py [options] keyword

Options:
  -h, --help            show this help message and exit
  -f DATA_FILE, --file=DATA_FILE
                        data file
  -b BINS, --bins=BINS  bins
  -w BIN_WIDTH, --bin_width=BIN_WIDTH
                        bin width
  -s SIGNIFICANCE_LEVEL, --significance_level=SIGNIFICANCE_LEVEL
                        significance level
```

* -h, --help
  * オプション一覧を表示します。
* -f DATA_FILE, --file=DATA_FILE
  * DATA_FILEに検定対象のデータを保存したファイルを指定します。
  * 渡すファイルは空白区切りまたは改行区切りにデータを配置します。
* -b BINS, --bins=BINS
  * 階級の数をBINSに指定します。
  * この値は目安として使われ、状況によって増やしたり、合併して減らしたりします。
* -w BIN_WIDTH, --bin_width=BIN_WIDTH
  * 階級の幅をBIN_WIDTHに指定します。
* -s SIGNIFICANCE_LEVEL, --significance_level=SIGNIFICANCE_LEVEL
  * 有意水準をSIGNIFICANCE_LEVELに指定します。デフォルトは0.05です。

## 使用例
### 例1(ファイルを指定)
#### 入力
```shell
$ python main.py -f height.txt
```
#### 出力
```shell
階級	度数	比率			Z-Score			累積比率		期待比率		期待度数
147.5	1  	0.0166666666667   	-2.02984708026    	0.0211860431811   	0.0211893280832   	1.27135968499
151.5	4  	0.0666666666667   	-1.22461848644    	0.110359499956    	0.0891872831444   	5.35123698866
155.5	21 	0.35              	-0.419389892616   	0.337465604865    	0.227141317776    	13.6284790665
159.5	15 	0.25              	0.385838701207    	0.650191934463    	0.312774817905    	18.7664890743
163.5	11 	0.183333333333    	1.19106729503     	0.883186415872    	0.233030607269    	13.9818364362
167.5	6  	0.1               	1.99629588885     	0.977049136998    	0.0938772745674   	5.63263647405
171.5	1  	0.0166666666667   	2.80152448268     	0.997456910772    	0.0204109380051   	1.22465628031
175.5	1  	0.0166666666667   	3.6067530765      	0.999844973751    	0.0023884332496   	0.143305994976
カイ二乗値: X^2 = 6.09415382948
自由度:       v = 4.0
有意水準:     a = 0.05
棄却域:     x^2 > 9.48772997465
accept
```

### 例2(階級の幅と階級の数を指定)
#### 入力
```shell
$ python main.py -f height.txt -b 10 -w 3
```
#### 出力
```shell
階級	度数	比率			Z-Score			累積比率		期待比率		期待度数
147.5	1  	0.0166666666667   	-2.02984708026    	0.0211860431811   	0.0211866881214   	1.27120128728
150.5	2  	0.0333333333333   	-1.42592563489    	0.0769449048085   	0.0557605590248   	3.34563354149
153.5	8  	0.133333333333    	-0.822004189527   	0.205537256378    	0.128596266146    	7.71577596875
156.5	17 	0.283333333333    	-0.21808274416    	0.413682321004    	0.208151400926    	12.4890840556
159.5	13 	0.216666666667    	0.385838701207    	0.650191934463    	0.236516813226    	14.1910087936
162.5	8  	0.133333333333    	0.989760146574    	0.838854315469    	0.188668124219    	11.3200874531
165.5	7  	0.116666666667    	1.59368159194     	0.944496314987    	0.105645215446    	6.33871292674
168.5	3  	0.05              	2.19760303731     	0.986011296384    	0.0415162451857   	2.49097471114
171.5	0  	0.0               	2.80152448268     	0.997456910772    	0.011445962812    	0.686757768722
174.5	1  	0.0166666666667   	3.40544592804     	0.999669719493    	0.00221287608347  	0.132772565008
177.5	0  	0.0               	4.00936737341     	0.999969559175    	0.000299848809429 	0.0179909285658
カイ二乗値: X^2 = 3.48415660132
自由度:       v = 4.0
有意水準:     a = 0.05
棄却域:     x^2 > 9.48772997465
accept
```

### 例3(有意水準を指定)
#### 入力
```shell
$ python main.py -f height.txt -b 10 -w 3 -s 0.95
```
#### 出力
```shell
階級	度数	比率			Z-Score			累積比率		期待比率		期待度数
147.5	1  	0.0166666666667   	-2.02984708026    	0.0211860431811   	0.0211866881214   	1.27120128728
150.5	2  	0.0333333333333   	-1.42592563489    	0.0769449048085   	0.0557605590248   	3.34563354149
153.5	8  	0.133333333333    	-0.822004189527   	0.205537256378    	0.128596266146    	7.71577596875
156.5	17 	0.283333333333    	-0.21808274416    	0.413682321004    	0.208151400926    	12.4890840556
159.5	13 	0.216666666667    	0.385838701207    	0.650191934463    	0.236516813226    	14.1910087936
162.5	8  	0.133333333333    	0.989760146574    	0.838854315469    	0.188668124219    	11.3200874531
165.5	7  	0.116666666667    	1.59368159194     	0.944496314987    	0.105645215446    	6.33871292674
168.5	3  	0.05              	2.19760303731     	0.986011296384    	0.0415162451857   	2.49097471114
171.5	0  	0.0               	2.80152448268     	0.997456910772    	0.011445962812    	0.686757768722
174.5	1  	0.0166666666667   	3.40544592804     	0.999669719493    	0.00221287608347  	0.132772565008
177.5	0  	0.0               	4.00936737341     	0.999969559175    	0.000299848809429 	0.0179909285658
カイ二乗値: X^2 = 3.48415660132
自由度:       v = 4.0
有意水準:     a = 0.95
棄却域:     x^2 > 0.710723021861
reject
```

### 例4(対象データを直接入力)
#### 入力
```shell
$ python main.py 149 153 153 155 153 165 155 160 165 155 157 161 161 155 155 155 155 151 159 157 157 154 165 157 154 157 151 164 155 155 158 163 160 154 160 163 156 163 155 147 162 152 158 156 166 158 160 155 161 155 159 158 159 158 148 153 167 172 168 153
```
#### 出力
```shell
階級	度数	比率			Z-Score			累積比率		期待比率		期待度数
147.5	1  	0.0166666666667   	-2.02984708026    	0.0211860431811   	0.0211893280832   	1.27135968499
151.5	4  	0.0666666666667   	-1.22461848644    	0.110359499956    	0.0891872831444   	5.35123698866
155.5	21 	0.35              	-0.419389892616   	0.337465604865    	0.227141317776    	13.6284790665
159.5	15 	0.25              	0.385838701207    	0.650191934463    	0.312774817905    	18.7664890743
163.5	11 	0.183333333333    	1.19106729503     	0.883186415872    	0.233030607269    	13.9818364362
167.5	6  	0.1               	1.99629588885     	0.977049136998    	0.0938772745674   	5.63263647405
171.5	1  	0.0166666666667   	2.80152448268     	0.997456910772    	0.0204109380051   	1.22465628031
175.5	1  	0.0166666666667   	3.6067530765      	0.999844973751    	0.0023884332496   	0.143305994976
カイ二乗値: X^2 = 6.09415382948
自由度:       v = 4.0
有意水準:     a = 0.05
棄却域:     x^2 > 9.48772997465
accept
```


## 演習課題1

### 注意
演習課題1は結果だけもとめられていたので演習室で動くことを考慮していません。
グラフ作成にmatplotlibとnumpyを使用したため、この2つのライブラリをインストールすれば実行可能です。

### オプションについて
```shell
$ python graph.py --help
```

```shell
Usage: graph.py [options] keyword

Options:
  -h, --help            show this help message and exit
  -n NUMBER, --number=NUMBER
                        number of samples
  -a AVARAGE, --avarage=AVARAGE
                        avarage
  -s SIGMA, --sigma=SIGMA
                        sigma
  -e EXECUTIONS, --executions=EXECUTIONS
                        number of executions
  -f FILE_NAME, --file_name=FILE_NAME
                        output file name
  -t FILE_TYPE, --type=FILE_TYPE
                        output file type
```

* -h, --help
  * オプション一覧を表示します。
* -n NUMBER, --number=NUMBER
  * 標本数をNUMBERに指定します。デフォルトは1000です。
* -a AVARAGE, --avarage=AVARAGE
  * 平均値をAVARAGEに指定します。デフォルトは150です。
* -s SIGMA, --sigma=SIGMA
  * 標準偏差をSIGMAに指定します。デフォルトは10です。
* -e EXECUTIONS, --executions=EXECUTIONS
  * 実行回数をEXECUTIONSに指定します。デフォルトは1000です。
* -f FILE_NAME, --file_name=FILE_NAME
  * ファイル名(拡張子を除く)をFILE_NAMEに指定します。デフォルトはoutputです。
* -t FILE_TYPE, --type=FILE_TYPE
  * ファイルの拡張子(png, pdf, eps, svgのいずれか)をFILE_TYPEに指定します。デフォルトはpngです。

### 使用例
#### 例1
```shell
$ python graph.py
```

#### 例2(サンプル数、実行回数を指定)
```shell
$ python graph.py -n 100 -e 100
```

#### 例3(epsで出力)
```shell
$ python graph.py -t eps
```

